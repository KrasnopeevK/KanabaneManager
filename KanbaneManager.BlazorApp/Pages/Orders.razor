@page "/orders"
@using KanbaneManager.Shared.Entities
@using System.Net
@inject HttpClient Http

@if (_orders == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @if (_isEditing)
    {
        <table class="table">
            <thead>
            <tr>
                <th>Машина</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>
                    
                    <RadzenDropDown AllowClear="true" TValue="Car"
                                    Data="@(_cars.Select(c => new {Id = c.Id, carName = $"{c.Label}, {c.RegNumber}"}).Distinct())"
                                    TextProperty="carName" ValueProperty="Id" Style="margin-bottom: 20px" Change="@(args => Change(args, "DropDown"))"/>
                </td>
                
                
            </tr>
            </tbody>
        </table>
        
        <div class="d-flex justify-content-center">
            <button class="btn btn-primary btn-sm" role="button" aria-pressed="true" @onclick="EditFinished" style="margin: 0 10px 0 0;">Сохранить</button>
            <button class="btn btn-secondary btn-sm" role="button" aria-pressed="true" @onclick="CancelEditing" style="margin: 0 0 0 10px;">Отмена</button>
        </div>
    }

    <table class="table">
        <thead>
        <tr>
            <th>Машина</th>
            <th>
                <button class="btn btn-danger" style="alignment: right;" @onclick="@(() => Edit())">Добавить</button>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var order in _orders)
        {
            <tr>
                <td>@order.OrderDescription</td>
                <td style="width: 100px">
                    <button class="btn btn-primary" style="alignment: right;" @onclick="@(() => Edit(order.Id))">Редактировать</button>
                </td>
                <td style="width: 100px">
                    <button class="btn btn-danger" style="alignment: right;" @onclick="@(async () => await Delete(order.Id))">Удалить</button>
                </td>
                <td style="width: 100px">
                    <button class="btn btn-danger" style="alignment: right;" @onclick="@(async () => await Details(order.Id))">Удалить</button>
                    </td>
            </tr>
        }
        </tbody>
    </table>
}




@code{
    IEnumerable<Order> _orders = null;
    bool _isEditing;
    Order _editingOrder = null;
    IEnumerable<Car> _cars;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    protected override async Task OnInitializedAsync()
    {
        _orders = await Http.GetFromJsonAsync<Order[]>("https://localhost:44327/orders");
        _cars = await Http.GetFromJsonAsync<Car[]>("https://localhost:44327/cars");
        // _tradePoints = await Http.GetFromJsonAsync<TradePoint[]>("https://localhost:44327/tradepoints");
        // _employees = await Http.GetFromJsonAsync<Employee[]>("https://localhost:44327/employees");
    }


    private async Task Delete(int orderId)
    {
        var outcome = await Http.DeleteAsync($"https://localhost:44327/orders/{orderId}");
        if (outcome.StatusCode == HttpStatusCode.OK)
        {
            _orders = await Http.GetFromJsonAsync<Order[]>("https://localhost:44327/orders");
        }
    }




    private async Task Details(int orderId)
    {
        //TODO
        _editingOrder = _orders.FirstOrDefault(x => x.Id == orderId);
        _isEditing = true;
    }

    private void Edit()
    {
        _editingOrder = new Order
        {
            Car = new Car(),
            Executor = new Employee(),
            ExecutorId = 1,
            CarId = 1,
            CreationDate = DateTime.Now,
            OrderDate = DateTime.Now,
            OrderDescription = "Some description"
        };;
        _isEditing = true;
    }

    private void Edit(int orderId)
    {
        _editingOrder = _orders.FirstOrDefault(x => x.Id == orderId);
        _isEditing = true;
    }

    private void CancelEditing()
    {
        _isEditing = false;
        _editingOrder = null;
    }
    async Task<bool> EditFinished()
    {
        var outcome = await Http.PutAsJsonAsync($"https://localhost:44327/orders/{_editingOrder.Id}", _editingOrder);
        if (outcome.StatusCode == HttpStatusCode.OK)
        {
            _orders = await Http.GetFromJsonAsync<Order[]>("https://localhost:44327/orders");
            _isEditing = false;
            return true;
        }
        return false;
    }

    void Change(object value, string name)
    {
        if (value is Car c)
        {
            _editingOrder.Car = c;
            var str = $"{c.Label} {c.RegNumber}";
            events.Add(DateTime.Now, $"{name} value changed to {str}");
            StateHasChanged();
        }
        else
        {

        }


    }


}
