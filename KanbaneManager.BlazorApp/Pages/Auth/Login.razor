@page "/auth/login"

@layout AuthLayout
@using KanbaneManager.Shared.Entities.AuthModels
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@using KanbaneManager.BlazorApp.Services

@inject AuthenticationService  authService
@inject NavigationManager navigationManager
@inject ILocalStorageService storageService
@inject AuthenticationStateProvider  authenticationStateProvider

<div class="row">
    <div class="col-12">
        <EditForm Model="model" OnValidSubmit="LoginUser">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />

                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Логин</label>
                <RadzenTextBox @bind-Value="model.Login"></RadzenTextBox>

                <label>Пароль</label>
                <RadzenPassword @bind-Value="model.Password"></RadzenPassword>

                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="Login"
                              ButtonStyle="Radzen.ButtonStyle.Primary" class="btn-block mr-2"
                              Disabled="isBusy" />
            </RadzenCard>
        </EditForm>
    </div>
</div>


@code {

    LoginRequest model = new LoginRequest();

    bool isBusy = false;
    string message = string.Empty;
    KanbaneManager.Shared.Entities.AuthModels.AlertMessageType messageType = KanbaneManager.Shared.Entities.AuthModels.AlertMessageType.Success;

    public async Task LoginUser()
    {
        isBusy = true;
        var result = await authService.LoginUserAsync(model);
        if (result.IsSuccess)
        {
            var userInfo = new LocalUserInfo()
            {
                AccessToken = result.Message, 
                FirstName = result.UserInfo["FirstName"],
                LastName = result.UserInfo["LastName"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier],
            };

            await storageService.SetItemAsync("User", userInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync(); 

            navigationManager.NavigateTo("/"); 
        }
        else
        {
            message = result.Message;
            messageType = KanbaneManager.Shared.Entities.AuthModels.AlertMessageType.Error;
        }
        isBusy = false;
    }
}
