@page "/points"
@using KanbaneManager.Entity
@using System.Net
@inject HttpClient Http

@if (_tradePoints == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @if (_isEditing)
    {
        <table class="table">
            <thead>
            <tr>
                <th>Город</th>
                <th>Адрес</th>
                <th>Название</th>
                <th>Номер телефона</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>
                    <input @bind=_editingPoint.City/>
                </td>
                <td>
                    <input @bind=_editingPoint.Address/>
                </td>
                <td>
                    <input @bind=_editingPoint.Name/>
                </td>
                <td>
                    <input @bind=_editingPoint.PhoneNumber/>
                </td>
            </tr>
            </tbody>
        </table>
        
        <div class="d-flex justify-content-center">
            <button class="btn btn-primary btn-sm" role="button" aria-pressed="true" @onclick="EditFinished" style="margin: 0 10px 0 0;">Сохранить</button>
            <button class="btn btn-secondary btn-sm" role="button" aria-pressed="true" @onclick="CancelEditing" style="margin: 0 0 0 10px;">Отмена</button>
        </div>
    }

    <table class="table">
        <thead>
        <tr>
            <th>Город</th>
            <th>Адрес</th>
            <th>Название</th>
            <th>Номер телефона</th>
            <th>
                <button class="btn btn-danger" style="alignment: right;" @onclick="@(() => Edit())">Добавить</button>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var point in _tradePoints)
        {
            <tr>
                <td>@point.City</td>
                <td>@point.Address</td>
                <td>@point.Name</td>
                <td>@point.PhoneNumber</td>
                <td style="width: 100px">
                    <button class="btn btn-primary" style="alignment: right;" @onclick="@(() => Edit(point.Id))">Редактировать</button>
                </td>
                <td style="width: 100px">
                    <button class="btn btn-danger" style="alignment: right;" @onclick="@(async () => await Delete(point.Id))">Удалить</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private bool _isEditing;
    private TradePoint _editingPoint;
    private  TradePoint[] _tradePoints;

    protected override async Task OnInitializedAsync()
    {
        _tradePoints = await Http.GetFromJsonAsync<TradePoint[]>("https://localhost:44327/tradepoints");
    }


    private async Task Delete(int pointId)
    {
        var outcome = await Http.DeleteAsync($"https://localhost:44327/tradepoints/{pointId}");
        if (outcome.StatusCode == HttpStatusCode.OK)
        {
            _tradePoints = await Http.GetFromJsonAsync<TradePoint[]>("https://localhost:44327/tradepoints");
        }
    }
    

    private void Edit(int pointId)
    {
        _editingPoint = _tradePoints.FirstOrDefault(x => x.Id == pointId);
        _isEditing = true;
    }
    
    private void Edit()
    {
        _editingPoint = new TradePoint();
        _isEditing = true;
    }

    async Task<bool> EditFinished()
    {
        HttpResponseMessage outcome = null;
        
        if (_editingPoint.Id != 0)
        {
            outcome = await Http.PostAsJsonAsync($"https://localhost:44327/tradepoints", _editingPoint);
            if (outcome.StatusCode == HttpStatusCode.OK)
            {
                _tradePoints = await Http.GetFromJsonAsync<TradePoint[]>("https://localhost:44327/tradepoints");
            }
        }
        
        outcome = await Http.PutAsJsonAsync($"https://localhost:44327/tradepoints/{_editingPoint.Id}", _editingPoint);
        if (outcome.StatusCode == HttpStatusCode.OK)
        {
            _tradePoints = await Http.GetFromJsonAsync<TradePoint[]>("https://localhost:44327/tradepoints");
            _isEditing = false;
            return true;
        }
        return false;
    }

    private void CancelEditing()
    {
        _isEditing = false;
        _editingPoint = null;
    }
}