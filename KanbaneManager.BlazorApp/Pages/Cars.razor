@page "/cars"
@using KanbaneManager.Entity
@using System.Net
@inject HttpClient Http

@if (_cars == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @if (_isEditing == true)
    {
        <table class="table">
            <thead>
            <tr>
                <th>Гос. номер</th>
                <th>Марка</th>
                <th>Грузоподёмность</th>
                <th>Средний расход на 100км</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>
                    <input @_editingCar.RegNumber/>
                </td>
                <td>
                    <input @_editingCar.Label/>
                </td>
                <td>
                    <input @_editingCar.WeightLift/>
                </td>
                <td>
                    <input @_editingCar.NextToDate/>
                </td>
            </tr>
            </tbody>
        </table>
        
        <div class="d-flex justify-content-center">
            <button class="btn btn-primary btn-lg active" role="button" aria-pressed="true" @onclick="EditFinished">Сохранить</button>
            <button class="btn btn-secondary btn-lg active" role="button" aria-pressed="true" @onclick="CancelEditing">Отмена</button>
        </div>
    }

    <table class="table">
        <thead>
        <tr>
            <th>Гос. номер</th>
            <th>Марка</th>
            <th>Грузоподёмность</th>
            <th>Средний расход на 100км</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var car in _cars)
        {
            <tr>
                <td>@car.RegNumber</td>
                <td>@car.Label</td>
                <td>@car.WeightLift</td>
                <td>@car.NextToDate</td>
                <td style="width: 100px">
                    <button class="btn btn-primary" style="alignment: right;" @onclick="@(() => EditCar(car.Id))">Редактировать</button>
                </td>
                <td>
                    <button class="btn btn-danger" style="alignment: right;" @onclick="@(async () => await DeleteCar(car.Id))">Удалить</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private bool _isEditing = false;
    private Car _editingCar;
    private Car[] _cars;

    protected override async Task OnInitializedAsync()
    {
        _cars = await Http.GetFromJsonAsync<Car[]>("https://localhost:44327/car");
    }


    private async Task DeleteCar(int carId)
    {
        var outcome = await Http.DeleteAsync($"https://localhost:44327/car/{carId}");
        if (outcome.StatusCode == HttpStatusCode.OK)
        {
            _cars = await Http.GetFromJsonAsync<Car[]>("https://localhost:44327/car");
        }
    }

    private void EditCar(int carId)
    {
        _editingCar = _cars.FirstOrDefault(x => x.Id == carId);
        _isEditing = true;
    }

    async Task<bool> EditFinished()
    {
        var outcome = await Http.PutAsJsonAsync($"https://localhost:44327/car/{_editingCar.Id}", _editingCar);
        if (outcome.StatusCode == HttpStatusCode.OK)
        {
            _cars = await Http.GetFromJsonAsync<Car[]>("https://localhost:44327/car");
            return true;
        }
        return false;
    }

    private void CancelEditing()
    {
        _isEditing = false;
        _editingCar = null;
    }
}