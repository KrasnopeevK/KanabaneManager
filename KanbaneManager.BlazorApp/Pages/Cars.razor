@page "/cars"
@using KanbaneManager.Entity
@using System.Net
@using KanbaneManager.BlazorApp.Services

@if (_cars == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @if (_isEditing)
    {
        <table class="table">
            <thead>
            <tr>
                <th>Гос. номер</th>
                <th>Марка</th>
                <th>Грузоподёмность</th>
                <th>Дополнительная информация</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>
                    <input @bind=_editingCar.RegNumber/>
                </td>
                <td>
                    <input @bind=_editingCar.Label/>
                </td>
                <td>
                    <input @bind=_editingCar.Carrying/>
                </td>
                <td>
                    <input @bind=_editingCar.AdditionalInformation/>
                </td>
            </tr>
            </tbody>
        </table>
        
        <div class="d-flex justify-content-center">
            @* <button class="btn btn-primary btn-sm" role="button" aria-pressed="true" @onclick="EditFinished" style="margin: 0 10px 0 0;">Сохранить</button> *@
            <button class="btn btn-secondary btn-sm" role="button" aria-pressed="true" @onclick="CancelEditing" style="margin: 0 0 0 10px;">Отмена</button>
        </div>
    }

    <table class="table">
        <thead>
        <tr>
            <th>Гос. номер</th>
            <th>Марка</th>
            <th>Грузоподёмность</th>
            <th>Дополнительная информация</th>
            <th>
                <button class="btn btn-danger" style="alignment: right;" @onclick="@(() => Edit())">Добавить</button>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var car in _cars)
        {
            <tr>
                <td>@car.RegNumber</td>
                <td>@car.Label</td>
                <td>@car.Carrying</td>
                <td>@car.AdditionalInformation</td>
                <td style="width: 100px">
                    @* <button class="btn btn-primary" style="alignment: right;" @onclick="@(() => Edit(car.Id))">Редактировать</button> *@
                </td>
                <td style="width: 100px">
                    @* <button class="btn btn-danger" style="alignment: right;" @onclick="@(async () => await Delete(car.Id))">Удалить</button> *@
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private bool _isEditing;
    private Car _editingCar;
    private IEnumerable<Car> _cars;
    private HttpRequester<Car> Http;
    
    protected override async Task OnInitializedAsync()
    {
        _cars = await Http.GetAll<Car>("cars");
    }
    
    
    
    private void Edit()
    {
        _editingCar = new Car();
        _isEditing = true;
    }
    
    


    // private async Task Delete(int carId)
    // {
    //     var outcome = await Http.DeleteAsync($"https://localhost:44327/cars/{carId}");
    //     if (outcome.StatusCode == HttpStatusCode.OK)
    //     {
    //         _cars = await Http.GetFromJsonAsync<Car[]>("https://localhost:44327/cars");
    //     }
    // }
    //
    // private void Edit(int carId)
    // {
    //     _editingCar = _cars.FirstOrDefault(x => x.Id == carId);
    //     _isEditing = true;
    // }
    //
    // async Task<bool> EditFinished()
    // {
    //     var outcome = await Http.PutAsJsonAsync($"/cars/{_editingCar.Id}", _editingCar);
    //     if (outcome.StatusCode == HttpStatusCode.OK)
    //     {
    //         _cars = await Http.GetFromJsonAsync<Car[]>("https://localhost:44327/cars");
    //         _isEditing = false;
    //         return true;
    //     }
    //     return false;
    // }

    private void CancelEditing()
    {
        _isEditing = false;
        _editingCar = null;
    }
}